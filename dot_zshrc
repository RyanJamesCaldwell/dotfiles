# oh-my-zsh
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME=""
plugins=(git)
source $ZSH/oh-my-zsh.sh


if [ -f /opt/homebrew/opt/asdf/libexec/asdf.sh ]; then
  . /opt/homebrew/opt/asdf/libexec/asdf.sh
elif command -v brew >/dev/null 2>&1; then
  ASDF_PREFIX="$(brew --prefix asdf 2>/dev/null)"
  if [ -n "$ASDF_PREFIX" ] && [ -f "$ASDF_PREFIX/libexec/asdf.sh" ]; then
    . "$ASDF_PREFIX/libexec/asdf.sh"
  fi
  unset ASDF_PREFIX
fi

export PATH="/opt/homebrew/bin:/opt/homebrew/opt/curl/bin:$HOME/.local/bin:$PATH"

set -o vi
tabs -2

# Aliases
alias la='eza --long --all --git --no-user --icons=auto'
alias l='eza --long --git --no-user --icons=auto'
alias where='find . -name'
alias gd='git diff'
alias gs='git status'
alias gb='git branch'

if command -v fzf >/dev/null 2>&1; then
  source <(fzf --zsh)
fi
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
[[ -s "$HOME/.local/bin/env" ]] && source "$HOME/.local/bin/env"

# pnpm
export PNPM_HOME="/Users/ryancaldwell/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

export EDITOR='nvim'
[[ -s /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && \
  source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
[[ -s /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && \
  source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
eval "$(starship init zsh)"

# zoxide for easy `cd`ing
eval "$(zoxide init --cmd cd zsh)"

# Load in secrets if the file exists
[[ -f ~/.secrets ]] && source ~/.secrets

# Git Worktree Manager (Harpoon-style)
wt() {
  # Save git path and disable zoxide hooks
  local git_cmd=$(which git)
  local old_hooks=("${chpwd_functions[@]}")
  chpwd_functions=()

  if ! $git_cmd rev-parse --git-dir > /dev/null 2>&1; then
    echo "Not in a git repository"
    chpwd_functions=("${old_hooks[@]}")
    return 1
  fi

  local repo_root=$($git_cmd rev-parse --show-toplevel)
  local repo_name=$(basename "$repo_root")
  local wt_base_dir="$(dirname "$repo_root")/${repo_name}-worktrees"

  local result=$($git_cmd worktree list | fzf \
    --header="[Enter: jump] [Ctrl-N: new] [Ctrl-D: delete]" \
    --expect=ctrl-n,ctrl-d)

  local key=$(echo "$result" | head -1)
  local selection=$(echo "$result" | tail -1)

  case "$key" in
    ctrl-n)
      # Create new worktree
      read "branch?Branch name: "
      if [[ -n "$branch" ]]; then
        mkdir -p "$wt_base_dir"
        if $git_cmd worktree add "$wt_base_dir/$branch" -b "$branch"; then
          # Copy gitignored config files from current worktree
          local current_dir=$(pwd)
          local new_wt_dir="$wt_base_dir/$branch"

          for file in "$current_dir"/.env*(N) "$current_dir"/*.local(N); do
            if [[ -f "$file" ]]; then
              cp "$file" "$new_wt_dir/"
              echo "Copied $(basename "$file")"
            fi
          done

          builtin cd "$new_wt_dir"
          chpwd_functions=("${old_hooks[@]}")
          echo "Created and switched to worktree: $branch"
        fi
      fi
      ;;
    ctrl-d)
      # Delete worktree
      if [[ -n "$selection" ]]; then
        local path=${selection%% *}
        local branch=${selection##* }
        if [[ "$path" != "$repo_root" ]]; then
          echo "Delete worktree '$branch' at $path? (y/N)"
          if read -q; then
            echo ""
            $git_cmd worktree remove "$path" && echo "Deleted worktree: $branch"
          fi
        else
          echo "Cannot delete main worktree"
        fi
      fi
      ;;
    *)
      # Jump to worktree
      if [[ -n "$selection" ]]; then
        local path=${selection%% *}
        builtin cd "$path"
        chpwd_functions=("${old_hooks[@]}")
        echo "Switched to: $path"
      fi
      ;;
  esac

  # Restore hooks if still in function
  chpwd_functions=("${old_hooks[@]}")
}
